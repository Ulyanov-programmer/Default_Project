@import url('./_environment.pcss');

@layer general {
  emerge-menu {
    position: relative;
    display: inline-block;
    width: fit-content;

    > button {
    }

    > dialog {
      position: absolute;
      z-index: 1;
      top: 100%;

      display: block;

      width: max-content;

      background: white;

      transition: all 0.2s ease;

      &:not([open]) {
        pointer-events: none;
        opacity: 0;
      }

      &.toLeft {
        right: 0;
      }

      &.toRight {
        left: 0;
      }

      &.toCenter {
        left: 50%;
        translate: -50% 0;
      }
    }
  }

  spoiler-wrapper {
    /* ? Example of usage. Don't forget to connect the dialogs scripts.
    <spoiler-wrapper>
      <button type='button'
              data-toggle-dialog-id='spoiler'>
        Open the spoiler
      </button>

      <c-content>
        <dialog id='spoiler'>
          content
        </dialog>
      </c-content>
    </spoiler-wrapper>
    */
    > c-content {
      display: grid;

      /* You can "ajar" a content element by setting a value between 0 and 1 fr. */
      grid-template-rows: 0fr;
      transition: grid-template-rows 0.3s ease;

      dialog {
        overflow: hidden;
        opacity: 1;

        &:not([open]) {
          pointer-events: none;
        }

        &[open] {
          pointer-events: all;
        }
      }
    }

    > button {
      &[aria-expanded='true'] {
        ~ .content {
          grid-template-rows: 1fr;
        }
      }
    }
  }

  .NavMenu {
    ul {
      display: flex;
      flex-flow: row wrap;
      gap: 15px;

      li {
        a,
        button {
          display: inline-block;
          padding: 8px;
          transition: all 0.2s ease 0s;

          &:hover,
          &:focus {
            text-decoration: underline;
          }
        }
      }
    }

    @media (--burger-menu-is-visible) {
      display: none;
    }
  }

  #burger-menu {
    @custom-media --burger-menu-is-hidden (width > 768px);
    @custom-media --burger-menu-is-visible (width <= 768px);

    position: fixed;
    top: 0;
    left: 0;

    display: grid;
    place-content: center center;

    height: 100vh;

    transition: all 0.3s ease;

    &::backdrop {
    }

    &:not([open]) {
      translate: 0 -100% 0;
      opacity: 0;
    }

    nav {
      scroll-snap-type: y mandatory;
      overflow: auto;

      /* For normal outline visibility */
      padding: 1px;

      ul {
        display: grid;
        gap: 10px;
        justify-items: right;

        li {
          scroll-snap-align: start;

          a,
          button {
            padding: 10px 7px;
          }

          a {
          }

          button {
          }
        }
      }
    }

    @media (--burger-menu-is-hidden) {
      display: none;
    }
  }

  button[data-open-dialog-id='burger-menu'] {
    @media (--burger-menu-is-hidden) {
      display: none;
    }
  }

  /*
    ? This is the basic properties and animations of the burger button.
    If you find that a part of the <rect> extends beyond the boundaries of the <svg>, try to make the <svg> a square (width and height must be equal).
  */
  button.AnimatedSvgBurger {
    svg {
      > rect {
        transform-origin: center;
        transform-box: fill-box;
        transition: all 0.3s ease;

        &:nth-child(1) {
          width: 100%;
        }

        &:nth-child(2) {
          width: 100%;
        }

        &:nth-child(3) {
          width: 100%;
        }
      }
    }

    &[aria-expanded='true'] {
      .rectTop {
        rotate: 45deg;

        x: 0%;
        y: 50%;
      }

      .rectCenter {
        @mixin hide;
      }

      .rectBottom {
        rotate: -45deg;

        x: 0;
        y: 50%;
      }
    }
  }

  #infinite-line {
    --direction: normal;
    --duration: 10s;
    --gap: 15px;

    @media (prefers-reduced-motion: reduce) {
    }

    @media (prefers-reduced-motion: no-preference) {
      /* Use this to create the effect of smoothly hiding the elements. */
      mask: linear-gradient(
        90deg,
        transparent,
        rgb(0 0 0 / 100%) 10%,
        rgb(0 0 0 / 100%) 90%,
        transparent
      );
    }
  }
}
