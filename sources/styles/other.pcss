.smooth_hiding_sides {
  /* Use this to create the effect of smoothly hiding the elements. */

  mask: linear-gradient(
    90deg,
    transparent,
    rgb(0 0 0 / 100%) 10%,
    rgb(0 0 0 / 100%) 90%,
    transparent
  );
}

.hide_scrollbar {
  scrollbar-width: none;

  &::-webkit-scrollbar {
    width: 0;
    height: 0;
  }
}

emerge-menu {
  position: relative;
  display: inline-block;
  width: fit-content;

  > button {
  }

  > dialog {
    position: absolute;
    z-index: 1;
    top: 100%;

    display: block;

    width: max-content;

    background: white;

    transition: all 0.2s ease;

    &:not([open]) {
      pointer-events: none;
      opacity: 0;
    }

    &.toLeft {
      right: 0;
    }

    &.toRight {
      left: 0;
    }

    &.toCenter {
      left: 50%;
      translate: -50% 0;
    }
  }
}

spoiler-wrapper {
  /* ? Example of usage. Don't forget to connect the dialogs scripts.
  <spoiler-wrapper>
    <button type='button'
            data-toggle-dialog-id='spoiler'>
      Open the spoiler
    </button>

    <content-block>
      <dialog id='spoiler'> content </dialog>
    </content-block>
  </spoiler-wrapper>
  */

  > content-block {
    --transition-timing: 0.3s;
    display: grid;

    /* You can "ajar" a content element by setting a value between 0 and 1 fr. */
    grid-template-rows: 0fr;
    transition: grid-template-rows var(--transition-timing) ease;

    &:has(dialog[open]) {
      grid-template-rows: 1fr;
    }

    dialog {
      overflow: hidden;
      opacity: 1;
      transition: opacity var(--transition-timing) ease;

      &:not([open]) {
        pointer-events: none;
      }

      &[open] {
      }
    }
  }
}

#burger-menu {
  @custom-media --burger-menu-is-hidden (width > 768px);
  @custom-media --burger-menu-is-visible (width <= 768px);

  position: fixed;
  bottom: 100vh;
  left: 0;

  display: grid;
  place-content: center center;
  place-items: center center;

  width: 100vw;
  height: 100vh;

  transition: all 0.3s ease;

  &::backdrop {
  }

  &:not([open]) {
  }

  &[open] {
  }

  nav {
    scroll-snap-type: y mandatory;
    overflow: auto;

    /* For normal outline visibility */
    padding: 1px;

    ul {
      display: grid;

      li {
        scroll-snap-align: start;

        a,
        button {
        }

        a {
        }

        button {
        }
      }
    }
  }

  @media (--burger-menu-is-hidden) {
    display: none;
  }
}
button[data-open-dialog-id='burger-menu'] {
  @media (--burger-menu-is-hidden) {
    display: none;
  }
}

/*
  ? This is the basic properties and animations of the burger button.
  If you find that a part of the <rect> extends beyond the boundaries of the <svg>, try to make the <svg> a square (width and height must be equal).
*/
button.AnimatedSvgBurger {
  svg {
    > rect {
      transform-origin: center;
      transform-box: fill-box;
      transition: all 0.3s ease;

      &:nth-child(1) {
        width: 100%;
      }

      &:nth-child(2) {
        width: 100%;
      }

      &:nth-child(3) {
        width: 100%;
      }
    }
  }

  &[aria-expanded='true'] {
    .rectTop {
      rotate: 45deg;

      x: 0%;
      y: 50%;
    }

    .rectCenter {
      pointer-events: none;
      overflow: hidden;
      opacity: 0;
    }

    .rectBottom {
      rotate: -45deg;

      x: 0;
      y: 50%;
    }
  }
}

.visuallyHidden {
  position: absolute;

  overflow: hidden;

  width: 1px;
  height: 1px;

  white-space: nowrap;

  clip-path: inset(50%);
}

[class*='inText'] {
  width: fit-content;
  color: transparent;
  background-clip: text;
  background-size: cover;

  &[class*='image'] {
    background-image: url('path_to_image');
  }

  &[class*='gradient'] {
    background-image: linear-gradient(90deg, red, blue);
  }
}
