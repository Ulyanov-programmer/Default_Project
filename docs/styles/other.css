[class*='pos'][class*='_r'] {
  position: relative;
}

[class*='pos'][class*='_a'] {
  position: absolute;
}

[class*='pos'][class*='_sticky'] {
  position: sticky;
  top: 0;
}

[class*='t'][class*='_upper'] {
  text-transform: uppercase;
}

[class*='t'][class*='_center'] {
  text-align: center;
}

[class*='fw'][class*='_100'] {
  font-weight: 100;
}

[class*='fw'][class*='_200'] {
  font-weight: 200;
}

[class*='fw'][class*='_300'] {
  font-weight: 300;
}

[class*='fw'][class*='_500'] {
  font-weight: 500;
}

[class*='fw'][class*='_600'] {
  font-weight: 600;
}

[class*='fw'][class*='_700'] {
  font-weight: 700;
}

[class*='fw'][class*='_800'] {
  font-weight: 800;
}

[class*='fw'][class*='_900'] {
  font-weight: 900;
}

.smooth_hiding_sides {
  /* Use this to create the effect of smoothly hiding the elements. */
  -webkit-mask: linear-gradient(90deg,
      transparent,
      rgb(0 0 0 / 100%) 10%,
      rgb(0 0 0 / 100%) 90%,
      transparent);
  mask: linear-gradient(90deg,
      transparent,
      rgb(0 0 0 / 100%) 10%,
      rgb(0 0 0 / 100%) 90%,
      transparent);
}

.hide_scrollbar {
  scrollbar-width: none;
}

.hide_scrollbar::-webkit-scrollbar {
  width: 0;
  height: 0;
}

emerge-menu {
  position: relative;
  display: inline-block;
  width: -moz-fit-content;
  width: fit-content;
}

emerge-menu>dialog {
  position: absolute;
  z-index: 1;
  top: 100%;
  display: block;
  width: -moz-max-content;
  width: max-content;
  background: white;
  transition: all 0.2s ease;
}

emerge-menu>dialog:not([open]) {
  pointer-events: none;
  opacity: 0;
}

emerge-menu>dialog.toLeft {
  right: 0;
}

emerge-menu>dialog.toRight {
  left: 0;
}

emerge-menu>dialog.toCenter {
  left: 50%;
  translate: -50% 0;
}

/* ? Example of usage. Don't forget to connect the dialogs scripts.
  <spoiler-wrapper>
    <button type='button'
            data-toggle-dialog-id='spoiler'>
      Open the spoiler
    </button>

    <content-block>
      <dialog id='spoiler'> content </dialog>
    </content-block>
  </spoiler-wrapper>
  */
spoiler-wrapper>content-block {
  --transition-timing: 0.3s;
  display: grid;
  /* You can "ajar" a content element by setting a value between 0 and 1 fr. */
  grid-template-rows: 0fr;
  transition: grid-template-rows var(--transition-timing) ease;
}

spoiler-wrapper>content-block:has(dialog[open]) {
  grid-template-rows: 1fr;
}

spoiler-wrapper>content-block dialog {
  overflow: hidden;
  opacity: 1;
  transition: opacity var(--transition-timing) ease;
}

spoiler-wrapper>content-block dialog:not([open]) {
  pointer-events: none;
}

@media (--burger-menu-is-visible) {
  .NavMenu {
    display: none
  }
}

#burger-menu {
  @custom-media --burger-menu-is-hidden (min-width: 768.02px);
  @custom-media --burger-menu-is-visible (max-width: 768px);
  position: fixed;
  bottom: 100vh;
  left: 0;
  display: grid;
  place-content: center center;
  place-items: center center;
  width: 100vw;
  height: 100vh;
  transition: all 0.3s ease;
}

#burger-menu nav {
  scroll-snap-type: y mandatory;
  overflow: auto;
  /* For normal outline visibility */
  padding: 1px;
}

#burger-menu nav ul {
  display: grid;
}

#burger-menu nav ul li {
  scroll-snap-align: start
}

@media (--burger-menu-is-hidden) {
  #burger-menu {
    display: none
  }
}

@media (--burger-menu-is-hidden) {
  button[data-open-dialog-id='burger-menu'] {
    display: none
  }
}

/*
  ? This is the basic properties and animations of the burger button.
  If you find that a part of the <rect> extends beyond the boundaries of the <svg>, try to make the <svg> a square (width and height must be equal).
*/
button.AnimatedSvgBurger svg>rect {
  transform-origin: center;
  transform-box: fill-box;
  transition: all 0.3s ease;
}

button.AnimatedSvgBurger svg>rect:nth-child(1) {
  width: 100%;
}

button.AnimatedSvgBurger svg>rect:nth-child(2) {
  width: 100%;
}

button.AnimatedSvgBurger svg>rect:nth-child(3) {
  width: 100%;
}

button.AnimatedSvgBurger[aria-expanded='true'] .rectTop {
  rotate: 45deg;
  x: 0%;
  y: 50%;
}

button.AnimatedSvgBurger[aria-expanded='true'] .rectCenter {
  pointer-events: none;
  overflow: hidden;
  opacity: 0;
}

button.AnimatedSvgBurger[aria-expanded='true'] .rectBottom {
  rotate: -45deg;
  x: 0;
  y: 50%;
}

img.cover {
  width: 100%;
  height: 100%;
  -o-object-fit: cover;
  object-fit: cover;
}

img.contain {
  width: 100%;
  height: 100%;
  -o-object-fit: contain;
  object-fit: contain;
}

img.fill {
  width: 100%;
  height: 100%;
  -o-object-fit: fill;
  object-fit: fill;
}

.visuallyHidden {
  position: absolute;
  overflow: hidden;
  width: 1px;
  height: 1px;
  white-space: nowrap;
  clip-path: inset(50%);
}

[class*='inText'] {
  width: -moz-fit-content;
  width: fit-content;
  color: transparent;
  -webkit-background-clip: text;
  background-clip: text;
  background-size: cover;
}

[class*='inText'][class*='image'] {
  background-image: url('');
}

[class*='inText'][class*='gradient'] {
  background-image: linear-gradient(90deg, red, blue);
}

[class*='grid'] {
  display: grid;
}

[class*='grid'][class*='inline'] {
  display: inline-grid;
}

[class*='grid'][class*='twoColumns'] {
  grid-template: 1fr 1fr;
}

[class*='grid'][class*='threeColumns'] {
  grid-template: 1fr 1fr 1fr;
}

[class*='grid'][class*='JIStart'] {
  justify-items: start;
}

[class*='grid'][class*='JICenter'] {
  justify-items: center;
}

[class*='grid'][class*='JIEnd'] {
  justify-items: end;
}

[class*='grid'][class*='JCSpaceBetween'] {
  justify-content: space-between;
}

[class*='grid'][class*='AIStart'] {
  align-items: start;
}

[class*='grid'][class*='AICenter'] {
  align-items: center;
}

[class*='grid'][class*='AIEnd'] {
  align-items: end;
}

[class*='grid'][class*='AISpaceBetween'] {
  align-content: space-between;
}

[class*='grid'][class*='ACBaseline'] {
  align-content: baseline;
}

[class*='grid'][class*='fullWidthWithPaddings'] {
  grid-template-columns: var(--content-inline-padding) 1fr var(--content-inline-padding);
  width: 100vw;
}

[class*='flex'] {
  display: flex;
}

[class*='flex'][class*='inline'] {
  display: inline-flex;
}

[class*='flex'][class*='row'] {
  flex-direction: row;
}

[class*='flex'][class*='column'] {
  flex-direction: column;
}

[class*='flex'][class*='wrap'] {
  flex-wrap: wrap;
}

[class*='flex'][class*='AIStart'] {
  align-items: start;
}

[class*='flex'][class*='AICenter'] {
  align-items: center;
}

[class*='flex'][class*='AIEnd'] {
  align-items: flex-end;
}

[class*='flex'][class*='AIBaseline'] {
  align-items: baseline;
}

[class*='flex'][class*='JCStart'] {
  justify-content: start;
}

[class*='flex'][class*='JCCenter'] {
  justify-content: center;
}

[class*='flex'][class*='JCEnd'] {
  justify-content: end;
}

[class*='flex'][class*='JCSpaceBetween'] {
  justify-content: space-between;
}